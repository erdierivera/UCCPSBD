{"ast":null,"code":"export const Required = function (data, min = null, max = null) {\n  let errorMsg = {};\n  data ? data : data = '';\n\n  if (data.length < 1) {\n    errorMsg.msg = \"Please Enter Some Value\";\n    errorMsg.status = false;\n  } else if (min || max) {\n    errorMsg = lengthValidator(data, min, max);\n  } else {\n    errorMsg.msg = \"Correct Value\";\n    errorMsg.status = true;\n  }\n\n  return errorMsg;\n};\nexport const Numeric = function (data, min = null, max = null) {\n  let errorMsg = {};\n  data ? data : data = '';\n\n  if (isNaN(data)) {\n    errorMsg.msg = \"Please type Number only\";\n    errorMsg.status = false;\n  } else if (min || max) {\n    errorMsg = lengthValidator(data, min, max);\n  } else {\n    errorMsg.msg = \"Correct Value\";\n    errorMsg.status = true;\n  }\n\n  return errorMsg;\n};\nexport const Letter = function (data = '', min = null, max = null) {\n  let errorMsg = {};\n  let letters = /^[A-Za-z]+$/;\n  data ? data : data = '';\n\n  if (data.match(letters)) {\n    errorMsg.msg = \"Correct Value\";\n    errorMsg.status = true;\n\n    if (min || max) {\n      errorMsg = lengthValidator(data, min, max);\n    }\n  } else {\n    errorMsg.msg = \"Please type letters only\";\n    errorMsg.status = false;\n  }\n\n  return errorMsg;\n};\nexport const AlphaNumeric = function (data = '', min = null, max = null) {\n  let errorMsg = {};\n  let letterNumber = /^[0-9a-zA-Z]+$/;\n  data ? data : data = '';\n  console.warn(\"income AlphaNumeric nx\", data, min, max);\n\n  if (data.match(letterNumber)) {\n    errorMsg.msg = \"Correct Value\";\n    errorMsg.status = true;\n\n    if (min || max) {\n      errorMsg = lengthValidator(data, min, max);\n    }\n  } else {\n    errorMsg.msg = \"Please type letters and number only \";\n    errorMsg.status = false;\n  }\n\n  return errorMsg;\n};\nexport const Email = function (data = '') {\n  let errorMsg = {};\n  data ? data : data = '';\n  console.warn(\"comming data\", data);\n  let email = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n\n  if (data.match(email)) {\n    errorMsg.msg = \"Correct Value\";\n    errorMsg.status = true;\n  } else {\n    errorMsg.msg = \"Please Enter Valid Email Address\";\n    errorMsg.status = false;\n  }\n\n  return errorMsg;\n};\nexport const CustomRx = function (data = '', spChar = null, capChar = null, min = null, max = null) {\n  let errorMsg = {}; //         let letterNumber = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\n\n  let rx = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])/;\n  let specialChar = /(?=.*?[#?!@$%^&*-])/;\n  let capitalChar = /^(?=.*?[A-Z])/;\n\n  if (spChar) {\n    if (!data.match(specialChar)) {\n      errorMsg.msg = \"Please Enter at least one Special character\";\n      errorMsg.status = false;\n      return errorMsg;\n    }\n  }\n\n  if (capChar) {\n    if (!data.match(capitalChar)) {\n      errorMsg.msg = \"Please Enter at least one capital letter\";\n      errorMsg.status = false;\n      return errorMsg;\n    }\n  }\n\n  if (min || max) {\n    errorMsg = lengthValidator(data, min, max);\n  }\n\n  return errorMsg;\n};\n\nfunction lengthValidator(data, min = null, max = null) {\n  let errorMsg = {};\n  let maxStatus = false;\n  let minStatus = false;\n  max ? data.length > max ? maxStatus = false : maxStatus = true : null;\n  min ? data.length < min ? minStatus = false : minStatus = true : null;\n\n  if (min && data.length < min) {\n    errorMsg.status = false;\n    errorMsg.msg = 'Minimum length should be ' + min;\n    return errorMsg;\n  } else if (max && data.length > max) {\n    errorMsg.status = false;\n    errorMsg.msg = 'Maximum length should be ' + max;\n    return errorMsg;\n  } else {\n    errorMsg.status = true;\n    errorMsg.msg = \"Correct\";\n  }\n\n  return errorMsg;\n}","map":{"version":3,"sources":["C:/Project/UCCPSBDMembership/client/node_modules/react-js-validator/src/Function.js"],"names":["Required","data","min","max","errorMsg","length","msg","status","lengthValidator","Numeric","isNaN","Letter","letters","match","AlphaNumeric","letterNumber","console","warn","Email","email","CustomRx","spChar","capChar","rx","specialChar","capitalChar","maxStatus","minStatus"],"mappings":"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","sourcesContent":["export const Required = function (data, min = null, max = null) {\n    let errorMsg = {};\n    data ? data : data = ''\n    if (data.length < 1) {\n        errorMsg.msg = \"Please Enter Some Value\"\n        errorMsg.status = false\n    }\n    else if (min || max) {\n        errorMsg = lengthValidator(data, min, max)\n    }\n    else {\n        errorMsg.msg = \"Correct Value\"\n        errorMsg.status = true\n    }\n    return errorMsg;\n}\nexport const Numeric = function (data, min = null, max = null) {\n    let errorMsg = {};\n    data ? data : data = ''\n\n    if (isNaN(data)) {\n        errorMsg.msg = \"Please type Number only\"\n        errorMsg.status = false\n    }\n    else if (min || max) {\n        errorMsg = lengthValidator(data, min, max)\n    }\n    else {\n        errorMsg.msg = \"Correct Value\"\n        errorMsg.status = true\n    }\n    return errorMsg;\n}\nexport const Letter = function (data = '', min = null, max = null) {\n    let errorMsg = {};\n    let letters = /^[A-Za-z]+$/;\n    data ? data : data = ''\n    if (data.match(letters)) {\n        errorMsg.msg = \"Correct Value\"\n        errorMsg.status = true\n\n        if (min || max) {\n            errorMsg = lengthValidator(data, min, max)\n        }\n    }\n    else {\n        errorMsg.msg = \"Please type letters only\"\n        errorMsg.status = false\n    }\n\n\n    return errorMsg;\n}\n\nexport const AlphaNumeric = function (data = '', min = null, max = null) {\n    let errorMsg = {};\n    let letterNumber = /^[0-9a-zA-Z]+$/;\n    data ? data : data = ''\n    console.warn(\"income AlphaNumeric nx\", data, min, max)\n\n    if (data.match(letterNumber)) {\n        errorMsg.msg = \"Correct Value\"\n        errorMsg.status = true\n\n        if (min || max) {\n            errorMsg = lengthValidator(data, min, max)\n        }\n    }\n    else {\n        errorMsg.msg = \"Please type letters and number only \"\n        errorMsg.status = false\n    }\n\n\n    return errorMsg;\n}\n\nexport const Email = function (data = '') {\n    let errorMsg = {};\n    data ? data : data = ''\n    console.warn(\"comming data\", data)\n    let email = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n\n    if (data.match(email)) {\n        errorMsg.msg = \"Correct Value\"\n        errorMsg.status = true\n    }\n    else {\n        errorMsg.msg = \"Please Enter Valid Email Address\"\n        errorMsg.status = false\n    }\n    return errorMsg;\n}\n\n\nexport const CustomRx = function (data = '', spChar = null, capChar = null, min = null, max = null) {\n\n    let errorMsg = {};\n    //         let letterNumber = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\n    let rx = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])/;\n    let specialChar = /(?=.*?[#?!@$%^&*-])/;\n    let capitalChar = /^(?=.*?[A-Z])/\n    if (spChar) {\n        if (!data.match(specialChar)) {\n            errorMsg.msg = \"Please Enter at least one Special character\"\n            errorMsg.status = false\n            return errorMsg\n        }\n    }\n    if (capChar) {\n        if (!data.match(capitalChar)) {\n            errorMsg.msg = \"Please Enter at least one capital letter\"\n            errorMsg.status = false\n            return errorMsg\n        }\n    }\n    if (min || max) {\n        errorMsg = lengthValidator(data, min, max)\n    }\n    return errorMsg;\n}\n\n\nfunction lengthValidator(data, min = null, max = null) {\n\n    let errorMsg = {}\n    let maxStatus = false\n    let minStatus = false\n    max ? data.length > max ? maxStatus = false : maxStatus = true : null\n    min ? data.length < min ? minStatus = false : minStatus = true : null\n\n    if (min && data.length < min) {\n        errorMsg.status = false;\n        errorMsg.msg = 'Minimum length should be ' + min\n        return errorMsg;\n    }\n    else if (max && data.length > max) {\n        errorMsg.status = false;\n        errorMsg.msg = 'Maximum length should be ' + max\n        return errorMsg;\n    }\n\n    else {\n        errorMsg.status = true;\n        errorMsg.msg = \"Correct\"\n    }\n    return errorMsg\n}"]},"metadata":{},"sourceType":"module"}